import { z } from 'zod';

import { chatSchema, ParticipantRoleEnum } from './chat';
import { projectSchema, ProjectRoleEnum } from './project';
import { userSchema } from './user';

/**
 * Token param schema for invite routes
 */
export const tokenParamSchema = z.object({
  token: z.string().min(1, { message: "Token is required" })
});

/**
 * Project invite schema (Matches Prisma Model)
 */
export const projectInviteSchema = z.object({
  id: z.string().uuid(),
  projectId: z.string().uuid(),
  userId: z.string().uuid().nullable().optional(), // Optional link before acceptance
  invitedByUserId: z.string().uuid(),
  inviteEmail: z.string().email(),
  inviteToken: z.string(),
  role: ProjectRoleEnum,
  createdAt: z.coerce.date(),
  expiresAt: z.coerce.date(),
  accepted: z.boolean(),
  acceptedAt: z.coerce.date().nullable().optional(),
  acceptedByUserId: z.string().uuid().nullable().optional()
});

/**
 * Chat invite schema (Matches new Prisma Model)
 */
export const chatInviteSchema = z.object({
  id: z.string().uuid(),
  chatId: z.string().uuid(),
  userId: z.string().uuid().nullable().optional(), // Optional link before acceptance
  invitedByUserId: z.string().uuid(),
  inviteEmail: z.string().email(),
  inviteToken: z.string(),
  role: ParticipantRoleEnum, // Role to be granted upon acceptance
  createdAt: z.coerce.date(),
  expiresAt: z.coerce.date(),
  accepted: z.boolean(),
  acceptedAt: z.coerce.date().nullable().optional(),
  acceptedByUserId: z.string().uuid().nullable().optional()
});

/**
 * Project invite request schema (Input for sending invites)
 */
export const projectInviteRequestSchema = z.object({
  emails: z.array(z.string().email()),
  role: ProjectRoleEnum
});

/**
 * Chat invite request schema (Input for sending invites)
 */
export const chatInviteRequestSchema = z.object({
  emails: z.array(z.string().email()),
  role: ParticipantRoleEnum
});

/**
 * Project invite response schema
 */
export const projectInviteResponseSchema = z.object({
  inviteId: z.string().uuid(),
  projectId: z.string().uuid(),
  projectName: z.string(),
  inviteEmail: z.string().email(),
  role: ProjectRoleEnum
});

/**
 * Chat invite response schema
 */
export const chatInviteResponseSchema = z.object({
  participantId: z.string().uuid(),
  chatId: z.string().uuid(),
  chatTitle: z.string(),
  inviteEmail: z.string().email(),
  role: ParticipantRoleEnum
});

/**
 * Chat invite acceptance response schema
 */
export const chatInviteAcceptResponseSchema = z.object({
  participantId: z.string().uuid(),
  chatId: z.string().uuid(),
  chatTitle: z.string(),
  role: ParticipantRoleEnum
});

/**
 * Project invite acceptance response schema
 */
export const projectInviteAcceptResponseSchema = z.object({
  collaboratorId: z.string().uuid(),
  projectId: z.string().uuid(),
  projectName: z.string(),
  role: ProjectRoleEnum
});

/**
 * Types inferred from schemas
 */
export type ProjectInvite = z.infer<typeof projectInviteSchema>;
export type ChatInvite = z.infer<typeof chatInviteSchema>;
export type ProjectInviteRequest = z.infer<typeof projectInviteRequestSchema>;
export type ChatInviteRequest = z.infer<typeof chatInviteRequestSchema>;
export type ProjectInviteResponse = z.infer<typeof projectInviteResponseSchema>;
export type ChatInviteResponse = z.infer<typeof chatInviteResponseSchema>;
export type ChatInviteAcceptResponse = z.infer<typeof chatInviteAcceptResponseSchema>;
export type ProjectInviteAcceptResponse = z.infer<typeof projectInviteAcceptResponseSchema>;

// --- Response Schemas for GET /invite/[token] ---

export const baseInviteDetailsSchema = z.object({
  id: z.string().uuid(), // Invite ID (ProjectInvite or ChatInvite)
  email: z.string().email(),
  role: z.union([ProjectRoleEnum, ParticipantRoleEnum]),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date(),
});

export const projectInviteDetailsSchema = z.object({
  type: z.literal('project'),
  invite: baseInviteDetailsSchema.extend({ role: ProjectRoleEnum }),
  project: projectSchema.pick({ id: true, name: true, description: true }),
  invitedBy: userSchema.pick({ id: true }) // Simplified inviter details
});

export const chatInviteDetailsSchema = z.object({
  type: z.literal('chat'),
  invite: baseInviteDetailsSchema.extend({ role: ParticipantRoleEnum }),
  chat: chatSchema.pick({ id: true, title: true }),
  invitedBy: userSchema.pick({ id: true }) // Simplified inviter details
});

// Union type for the GET /invite/[token] response
export const inviteDetailsResponseSchema = z.union([
  projectInviteDetailsSchema,
  chatInviteDetailsSchema
]);

// --- Response Schemas for POST /invite/[token] (Acceptance) ---

export const projectAcceptResponseSchema = z.object({
  type: z.literal('project'),
  collaborator: z.object({ // Based on ProjectCollaborator
    id: z.string().uuid(),
    projectId: z.string().uuid(),
    projectName: z.string(), // Added for context
    userId: z.string().uuid(),
    role: ProjectRoleEnum,
    createdAt: z.coerce.date()
  })
});

// Represents the newly created/activated ChatParticipant
export const chatParticipantResponseSchema = z.object({
   id: z.string().uuid(), // Participant ID
   chatId: z.string().uuid(),
   userId: z.string().uuid(),
   role: ParticipantRoleEnum,
   joinedAt: z.coerce.date()
});

export const chatAcceptResponseSchema = z.object({
  type: z.literal('chat'),
  participant: chatParticipantResponseSchema.extend({
      chatTitle: z.string() // Added for context
  })
});

// Union type for the POST /invite/[token] response
export const acceptInviteResponseSchema = z.union([
  projectAcceptResponseSchema,
  chatAcceptResponseSchema
]);

// --- Types inferred from schemas ---

export type ProjectInviteDetails = z.infer<typeof projectInviteDetailsSchema>;
export type ChatInviteDetails = z.infer<typeof chatInviteDetailsSchema>;
export type InviteDetailsResponse = z.infer<typeof inviteDetailsResponseSchema>; // Union type
export type ProjectAcceptResponse = z.infer<typeof projectAcceptResponseSchema>;
export type ChatAcceptResponse = z.infer<typeof chatAcceptResponseSchema>;
export type AcceptInviteResponse = z.infer<typeof acceptInviteResponseSchema>; // Union type
export type ChatParticipantResponse = z.infer<typeof chatParticipantResponseSchema>;

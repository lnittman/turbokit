import { z } from 'zod';
import { Project as PrismaProject } from '@repo/database';

/**
 * Project role enum
 */
export const ProjectRoleEnum = z.enum(['OWNER', 'COLLABORATOR', 'VIEWER']);
export type ProjectRole = z.infer<typeof ProjectRoleEnum>;

/**
 * Base Project schema without relations
 */
export const projectSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1),
  description: z.string().nullable().optional(),
  userId: z.string().uuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  imageUrl: z.string().url().nullable().optional()
});

/**
 * Project collaborator schema
 */
export const projectCollaboratorSchema = z.object({
  id: z.string().uuid(),
  projectId: z.string().uuid(),
  userId: z.string().uuid(),
  role: ProjectRoleEnum,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});

/**
 * Project invite schema
 */
export const projectInviteSchema = z.object({
  id: z.string().uuid(),
  projectId: z.string().uuid(),
  userId: z.string().uuid().nullable().optional(),
  invitedByUserId: z.string().uuid(),
  inviteEmail: z.string().email(),
  inviteToken: z.string(),
  role: ProjectRoleEnum,
  createdAt: z.coerce.date(),
  expiresAt: z.coerce.date(),
  accepted: z.boolean(),
  acceptedAt: z.coerce.date().nullable().optional(),
  acceptedByUserId: z.string().uuid().nullable().optional()
});

/**
 * Request schemas for API operations
 */
export const createProjectSchema = z.object({
  name: z.string().min(1),
  description: z.string().optional()
});

export const updateProjectSchema = z.object({
  name: z.string().min(1).optional(),
  description: z.string().optional()
});

/**
 * Schema for validating UUID ID parameter in routes
 */
export const projectIdParamSchema = z.object({
  id: z.string().uuid("Invalid Project ID format")
});

/**
 * Types inferred from the schemas
 */
export type Project = z.infer<typeof projectSchema>;
export type ProjectCollaborator = z.infer<typeof projectCollaboratorSchema>;
export type ProjectInvite = z.infer<typeof projectInviteSchema>;
export type CreateProjectRequest = z.infer<typeof createProjectSchema>;
export type UpdateProjectRequest = z.infer<typeof updateProjectSchema>;

/**
 * Utility functions to safely convert between Prisma and Zod validated types
 */
export const fromPrisma = {
  project: (prismaProject: PrismaProject): Project => ({
    id: prismaProject.id,
    name: prismaProject.name,
    description: prismaProject.description || null,
    userId: prismaProject.userId,
    createdAt: prismaProject.createdAt,
    updatedAt: prismaProject.updatedAt,
    imageUrl: prismaProject.imageUrl || null
  })
}; 
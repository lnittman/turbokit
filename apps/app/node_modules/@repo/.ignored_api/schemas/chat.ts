import { z } from 'zod';
import { Chat as PrismaChat, ChatMessage as PrismaChatMessage } from '@repo/database';

/**
 * Participant role enum
 */
export const ParticipantRoleEnum = z.enum(['OWNER', 'MODERATOR', 'PARTICIPANT', 'VIEWER']);
export type ParticipantRole = z.infer<typeof ParticipantRoleEnum>;

/**
 * Chat message schema
 */
export const chatMessageSchema = z.object({
  id: z.string().uuid(),
  chatId: z.string().uuid(),
  userId: z.string().uuid(),
  content: z.string(),
  type: z.string(), // 'user', 'ai', 'system'
  mode: z.string().optional(), // 'main', 'spin', 'think'
  createdAt: z.coerce.date()
});

/**
 * Chat participant schema
 */
export const chatParticipantSchema = z.object({
  id: z.string().uuid(),
  chatId: z.string().uuid(),
  userId: z.string().uuid(),
  role: ParticipantRoleEnum,
  joinedAt: z.coerce.date(),
  invitedBy: z.string().optional(),
  inviteToken: z.string().optional(),
  inviteEmail: z.string().email().optional(),
  isActive: z.boolean()
});

/**
 * Shared link schema
 */
export const sharedLinkSchema = z.object({
  id: z.string().uuid(),
  chatId: z.string().uuid(),
  ownerId: z.string().uuid(),
  accessToken: z.string(),
  isActive: z.boolean(),
  messageCountAtShare: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  expiresAt: z.coerce.date().optional()
});

/**
 * Chat schema
 */
export const chatSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  userId: z.string().uuid(),
  projectId: z.string().uuid().optional(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  messages: z.array(chatMessageSchema).optional()
});

/**
 * Request schemas for API operations
 */
export const createChatSchema = z.object({
  title: z.string().optional(),
  projectId: z.string().uuid().optional(),
  initialMessage: z.string().optional()
});

export const chatMessageCreateSchema = z.object({
  content: z.string(),
  type: z.string(), // 'user', 'ai', 'system'
  mode: z.string().optional() // 'main', 'spin', 'think'
});

/**
 * Schema for updating a chat's project assignment
 */
export const updateChatProjectSchema = z.object({
  projectId: z.string().uuid().nullable().optional() // Allow null/undefined to remove project
});

/**
 * Schema for updating a chat (renaming)
 */
export const updateChatSchema = z.object({
  title: z.string().min(1, { message: "Title is required" })
});

/**
 * Schema for validating UUID ID parameter in routes
 */
export const chatIdParamSchema = z.object({
  id: z.string().uuid("Invalid Chat ID format")
});

/**
 * Types inferred from schemas
 */
export type ChatMessage = z.infer<typeof chatMessageSchema>;
export type Chat = z.infer<typeof chatSchema>;
export type ChatParticipant = z.infer<typeof chatParticipantSchema>;
export type SharedLink = z.infer<typeof sharedLinkSchema>;
export type CreateChatRequest = z.infer<typeof createChatSchema>;
export type ChatMessageCreate = z.infer<typeof chatMessageCreateSchema>;
export type UpdateChatProjectRequest = z.infer<typeof updateChatProjectSchema>;
export type UpdateChatRequest = z.infer<typeof updateChatSchema>;

/**
 * Utility functions to safely convert between Prisma and Zod validated types
 */
export const fromPrisma = {
  chat: (prismaChat: PrismaChat): Chat => ({
    id: prismaChat.id,
    title: prismaChat.title,
    userId: prismaChat.userId,
    projectId: prismaChat.projectId || undefined,
    createdAt: prismaChat.createdAt,
    updatedAt: prismaChat.updatedAt
  }),
  
  chatMessage: (prismaChatMessage: PrismaChatMessage): ChatMessage => ({
    id: prismaChatMessage.id,
    chatId: prismaChatMessage.chatId,
    userId: prismaChatMessage.userId,
    content: prismaChatMessage.content,
    type: prismaChatMessage.type,
    mode: prismaChatMessage.mode || undefined,
    createdAt: prismaChatMessage.createdAt
  })
}; 
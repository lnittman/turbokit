import { z } from 'zod';
import { SharedLink as PrismaSharedLink } from '@repo/database';

/**
 * Token param schema for share routes
 */
export const tokenParamSchema = z.object({
  token: z.string().min(1, { message: "Token is required" })
});

/**
 * Shared link schema
 */
export const sharedLinkSchema = z.object({
  id: z.string().uuid(),
  chatId: z.string().uuid(),
  ownerId: z.string().uuid(),
  accessToken: z.string(),
  isActive: z.boolean().default(true),
  messageCountAtShare: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  expiresAt: z.coerce.date().nullable().optional()
});

/**
 * Create shared link request schema
 */
export const createSharedLinkSchema = z.object({
  chatId: z.string().uuid(),
  expiresIn: z.enum(['1d', '7d', '30d', 'never']).optional().default('never')
});

/**
 * Shared link response schema (for frontend display)
 */
export const sharedLinkResponseSchema = z.object({
  id: z.string().uuid(),
  chatId: z.string().uuid(),
  chatTitle: z.string().optional(),
  accessToken: z.string(),
  messageCountAtShare: z.number().int(),
  url: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  expiresAt: z.coerce.date().nullable().optional(),
  isActive: z.boolean()
});

/**
 * Shared chat content schema (for viewing shared chats)
 */
export const sharedChatContentSchema = z.object({
  id: z.string().uuid(), // shared link id
  chat: z.object({
    id: z.string().uuid(),
    title: z.string(),
    messages: z.array(z.object({
      id: z.string().uuid(),
      content: z.string(),
      type: z.string(),
      mode: z.string().optional(),
      createdAt: z.coerce.date()
    }))
  }),
  owner: z.object({
    id: z.string().uuid()
  }),
  messageCountAtShare: z.number().int(),
  currentUser: z.object({
    id: z.string().uuid(),
    clerkId: z.string(),
    hideSharedWarning: z.boolean()
  }).nullable().optional(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  expiresAt: z.coerce.date().nullable().optional()
});

/**
 * Types inferred from schemas
 */
export type SharedLink = z.infer<typeof sharedLinkSchema>;
export type CreateSharedLinkRequest = z.infer<typeof createSharedLinkSchema>;
export type SharedLinkResponse = z.infer<typeof sharedLinkResponseSchema>;
export type SharedChatContent = z.infer<typeof sharedChatContentSchema>;

/**
 * Utility functions to safely convert between Prisma and Zod validated types
 */
export const fromPrisma = {
  sharedLink: (prismaSharedLink: PrismaSharedLink): SharedLink => ({
    id: prismaSharedLink.id,
    chatId: prismaSharedLink.chatId,
    ownerId: prismaSharedLink.ownerId,
    accessToken: prismaSharedLink.accessToken,
    isActive: prismaSharedLink.isActive,
    messageCountAtShare: prismaSharedLink.messageCountAtShare,
    createdAt: prismaSharedLink.createdAt,
    updatedAt: prismaSharedLink.updatedAt,
    expiresAt: prismaSharedLink.expiresAt || null
  })
}; 
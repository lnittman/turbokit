// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User model - minimal record that just links Clerk users to our data
model User {
  id                   String                @id @default(uuid())
  clerkId              String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  chats                Chat[]
  chatMessages         ChatMessage[]
  projects             Project[]
  hideSharedWarning    Boolean               @default(false)
  participations       ChatParticipant[]
  sharedLinks          SharedLink[]          @relation("Owner")
  projectCollaborators ProjectCollaborator[]

  // Project Invites
  projectInvites         ProjectInvite[] @relation("ProjectInviteUser")
  sentProjectInvites     ProjectInvite[] @relation("ProjectInviteInviter")
  acceptedProjectInvites ProjectInvite[] @relation("ProjectInviteAccepter")

  // Chat Invites
  chatInvites         ChatInvite[] @relation("ChatInviteUser")
  sentChatInvites     ChatInvite[] @relation("ChatInviteInviter")
  acceptedChatInvites ChatInvite[] @relation("ChatInviteAccepter")
}

// Project model for organizing chats
model Project {
  id            String                @id @default(uuid())
  name          String
  description   String?
  userId        String
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats         Chat[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  imageUrl      String? // Store URL to image in Vercel Blob storage
  collaborators ProjectCollaborator[]
  invites       ProjectInvite[]

  @@index([userId])
}

// Project collaborators
model ProjectCollaborator {
  id        String      @id @default(uuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      ProjectRole @default(COLLABORATOR)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

// Project invites
model ProjectInvite {
  id               String      @id @default(uuid())
  projectId        String
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId           String?
  user             User?       @relation("ProjectInviteUser", fields: [userId], references: [id], onDelete: SetNull)
  invitedByUserId  String
  invitedBy        User        @relation("ProjectInviteInviter", fields: [invitedByUserId], references: [id], onDelete: Cascade)
  inviteEmail      String
  inviteToken      String      @unique
  role             ProjectRole @default(COLLABORATOR)
  createdAt        DateTime    @default(now())
  expiresAt        DateTime
  accepted         Boolean     @default(false)
  acceptedAt       DateTime?
  acceptedByUserId String?
  acceptedBy       User?       @relation("ProjectInviteAccepter", fields: [acceptedByUserId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([userId])
  @@index([invitedByUserId])
  @@index([inviteToken])
  @@index([acceptedByUserId])
}

// Chat model for storing conversations
model Chat {
  id           String            @id @default(uuid())
  title        String
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId    String?
  project      Project?          @relation(fields: [projectId], references: [id], onDelete: SetNull)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  messages     ChatMessage[]
  participants ChatParticipant[]
  sharedLinks  SharedLink[]
  invites      ChatInvite[]

  @@index([userId])
  @@index([projectId])
}

// Chat messages within a conversation
model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  type      String // e.g., "user", "ai", "system"
  mode      String? // e.g., "main", "spin", "think"
  createdAt DateTime @default(now())

  @@index([chatId])
  @@index([userId])
}

// Chat participants (for collaborative chats)
model ChatParticipant {
  id       String          @id @default(uuid())
  chatId   String
  chat     Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId   String
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     ParticipantRole @default(VIEWER)
  joinedAt DateTime        @default(now())

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

// NEW: Chat invites model
model ChatInvite {
  id               String          @id @default(uuid())
  chatId           String
  chat             Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  invitedByUserId  String
  invitedBy        User            @relation("ChatInviteInviter", fields: [invitedByUserId], references: [id], onDelete: Cascade)
  inviteEmail      String
  inviteToken      String          @unique
  role             ParticipantRole @default(PARTICIPANT)
  createdAt        DateTime        @default(now())
  expiresAt        DateTime
  accepted         Boolean         @default(false)
  acceptedAt       DateTime?
  acceptedByUserId String?
  acceptedBy       User?           @relation("ChatInviteAccepter", fields: [acceptedByUserId], references: [id], onDelete: SetNull)
  userId           String?
  user             User?           @relation("ChatInviteUser", fields: [userId], references: [id], onDelete: SetNull)

  @@index([chatId])
  @@index([invitedByUserId])
  @@index([inviteToken])
  @@index([acceptedByUserId])
  @@index([userId])
}

// Public sharing links for chats
model SharedLink {
  id                  String    @id @default(uuid())
  chatId              String
  chat                Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  ownerId             String
  owner               User      @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  accessToken         String    @unique
  isActive            Boolean   @default(true)
  messageCountAtShare Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  expiresAt           DateTime?

  @@index([chatId])
  @@index([ownerId])
  @@index([accessToken])
}

enum ParticipantRole {
  OWNER
  MODERATOR
  PARTICIPANT
  VIEWER
}

enum ProjectRole {
  OWNER
  COLLABORATOR
  VIEWER
}
